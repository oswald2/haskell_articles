@misc{type_safety_back_and_forth,
	howpublished = {Matt Parsons: Type Safety Back and Forth -- \url{https://www.parsonsmatt.org/2017/10/11/type_safety_back_and_forth.html}},
	note = {Accessed: 27.11.2019}
}

@misc{keep_your_types_small,
	howpublished = {Matt Parsons: Keep your types small... -- \url{https://www.parsonsmatt.org/2018/10/02/small_types.html}},
	note = {Accessed: 27.11.2019}
}

@misc{algebraic_blindness,
	howpublished = {David Luposchainsky: Algebraic Blindness -- \url{https://github.com/quchen/articles/blob/master/algebraic-blindness.md}},
	note = {Accessed: 27.11.2019}
}


@misc{parse_dont_validate,
	howpublished = {Alexis King: Parse, don't validate -- \url{https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/}},
	note = {Accessed: 27.11.2019}
}



@misc{on_adhoc_datatypes,
	howpublished = {Jasper van der Jeugt: On Ad-hoc Datatypes -- \url{https://jaspervdj.be/posts/2016-05-11-ad-hoc-datatypes.html}},
	note = {Accessed: 27.11.2019}
}



@misc{good_design_and_type_safety_in_yahtzee,
	howpublished = {Tom Ellis: Good design and type safety in Yahtzee -- \url{http://h2.jaguarpaw.co.uk/posts/good-design-and-type-safety-in-yahtzee/}},
	note = {Accessed: 27.11.2019}
}

@misc{using_our_brain_less,
	howpublished = {Tom Ellis: Using our brain less in refactoring Yahtzee -- \url{http://h2.jaguarpaw.co.uk/posts/using-brain-less-refactoring-yahtzee/}},
	note = {Accessed: 27.11.2019}
}


@misc{weakly_typed_haskell,
	howpublished = {Michael Snoyman: Weakly Typed Haskell -- \url{https://www.fpcomplete.com/blog/2018/01/weakly-typed-haskell}},
	note = {Accessed: 27.11.2019}
}


@misc{the_trouble_with_typed_errors,
	howpublished = {Matt Parsons: The Trouble with Typed Errors -- \url{https://www.parsonsmatt.org/2018/11/03/trouble_with_typed_errors.html}},
	note = {Accessed: 27.11.2019}
}


@misc{type_directed_code_generation,
	howpublished = {Sandy Maguire: Type-Directed Code Generation -- \url{https://reasonablypolymorphic.com/blog/type-directed-code-generation/}},
	note = {Accessed: 27.11.2019}
}


@misc{practical_testing_in_haskell,
	howpublished = {Jasper van der Jeugt: Practical testing in Haskell -- \url{https://jaspervdj.be/posts/2015-03-13-practical-testing-in-haskell.html}},
	note = {Accessed: 27.11.2019}
}


@misc{screencast_introduction,
	howpublished = {Oskar Wickström: Property-Based Testing in a Screencast Editor: Introduction -- \url{https://wickstrom.tech/programming/2019/03/02/property-based-testing-in-a-screencast-editor-introduction.html}},
	note = {Accessed: 27.11.2019}


@misc{timeline_flattening,
	howpublished = {Oskar Wickström: Property-Based Testing in a Screencast Editor, Case Study 1: Timeline Flattening -- \url{https://wickstrom.tech/programming/2019/03/24/property-based-testing-in-a-screencast-editor-case-study-1.html}},
	note = {Accessed: 27.11.2019}

@misc{video_scene_classification,
	howpublished = {Oskar Wickström: Property-Based Testing in a Screencast Editor, Case Study 2: Video Scene Classification -- \url{https://wickstrom.tech/programming/2019/04/17/property-based-testing-in-a-screencast-editor-case-study-2.html}},
	note = {Accessed: 27.11.2019}


@misc{integration_testing,
	howpublished = {Oskar Wickström: Property-Based Testing in a Screencast Editor, Case Study 3: Integration Testing -- \url{https://wickstrom.tech/programming/2019/06/02/property-based-testing-in-a-screencast-editor-case-study-3.html}},
	note = {Accessed: 27.11.2019}

